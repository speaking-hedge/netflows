needed packages
---------------

docker.io
bison
flex
cmake
check
libgcrypt / libgcrypt-dev
libcap2 / libcap-dev
libcurl3 / libcurl4-openssl-dev
libncurses / libncurses-dev

libnfnetlink
ubuntu: sudo apt-get install libnfnetlink0 libnfnetlink-dev

libnetfilter_queue >= version 1.0.0
ubuntu: sudo apt-get install libnetfilter-queue1 libnetfilter-queue-dev

during development
------------------

If the program crashed during using the netfilter hook, check your iptables
for remaining hook entries. To clean the mess, you can run:

sudo iptables  -L INPUT  --line-numbers | grep NFQUEUE | awk '{ system("sudo iptables -D INPUT "$1) }'
sudo iptables  -L OUTPUT  --line-numbers | grep NFQUEUE | awk '{ system("sudo iptables -D OUTPUT "$1) }'
sudo ip6tables  -L INPUT  --line-numbers | grep NFQUEUE | awk '{ system("sudo ip6tables -D INPUT "$1) }'
sudo ip6tables  -L OUTPUT  --line-numbers | grep NFQUEUE | awk '{ system("sudo ip6tables -D OUTPUT "$1) }'

Be aware that this will kick out all NFQUEUE rules.

test environment
----------------

test/create_container.sh
- creates test environment based on ubuntu 14.04
- installs apache2, mysql, php5, sshd
- configures services / passwords

mysql: admin / 1234, port 3306
sshd: root / 1234, port 22
apache2: port 80

test/run_container.sh
- starts the container, exports ports of the servics to the local machine
-- lynx localhost
-- ssh root@localhost
-- mysql -h localhost -u admin -p
- some folders (eg. /var/www/html) are exported to test/mapped_folders/
so you can easily exchange files between the container and the host

test/provisioning.sh
- build the binaries and deploy them alongside with the files from
services/ to the webserver

test/clear_containers.sh
- whipe out all containers and images. use with care!
